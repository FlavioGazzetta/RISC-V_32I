#include <verilated.h>
#include <verilated_vcd_c.h>
#include <gtest/gtest.h>
#include "VHazardUnit.h" // Auto-generated by Verilator

class HazardUnitTest : public ::testing::Test {
protected:
    VHazardUnit* dut;              // Pointer to the DUT
    VerilatedVcdC* trace;          // Pointer to trace file
    uint64_t simulation_time = 0;  // Simulation time

    void SetUp() override {
        Verilated::traceEverOn(true);   // Enable tracing
        dut = new VHazardUnit;         // Initialize DUT
        trace = new VerilatedVcdC;
        dut->trace(trace, 99);         // Trace depth
        trace->open("HazardUnit.vcd"); // Open trace file
    }

    void TearDown() override {
        dut->final();
        trace->close();
        delete dut;
        delete trace;
    }

    void step() {
        simulation_time += 1;          // Increment simulation time
        dut->eval();                   // Evaluate the DUT
        trace->dump(simulation_time);  // Dump trace
    }

    void setInputs(uint32_t Rs1E, uint32_t Rs2E, uint32_t Rs1D, uint32_t Rs2D,
                   uint32_t RdE, uint32_t destReg_m, uint32_t destReg_w,
                   bool memoryRead_e, bool RegWriteM, bool RegWriteW,
                   bool zero_hazard, bool jump_hazard) {
        dut->Rs1E = Rs1E;
        dut->Rs2E = Rs2E;
        dut->Rs1D = Rs1D;
        dut->Rs2D = Rs2D;
        dut->RdE = RdE;
        dut->destReg_m = destReg_m;
        dut->destReg_w = destReg_w;
        dut->memoryRead_e = memoryRead_e;
        dut->RegWriteM = RegWriteM;
        dut->RegWriteW = RegWriteW;
        dut->zero_hazard = zero_hazard;
        dut->jump_hazard = jump_hazard;
        step();
    }
};
/*
// Test cases
TEST_F(HazardUnitTest, TestForwardAE) {
    setInputs(5, 0, 0, 0, 0, 5, 0, false, true, false, false, false);
    EXPECT_EQ(dut->ForwardAE, 0b10);  // ForwardAE should be 2'b10
}

TEST_F(HazardUnitTest, TestForwardBE) {
    setInputs(0, 5, 0, 0, 0, 5, 0, false, true, false, false, false);
    EXPECT_EQ(dut->ForwardBE, 0b10);  // ForwardBE should be 2'b10
}

TEST_F(HazardUnitTest, TestStall) {
    setInputs(0, 0, 5, 0, 5, 0, 0, true, false, false, false, false);
    EXPECT_EQ(dut->stall, 1);  // Stall should be asserted
}

TEST_F(HazardUnitTest, TestFlushZeroHazard) {
    setInputs(0, 0, 0, 0, 0, 0, 0, false, false, false, true, false);
    EXPECT_EQ(dut->Flush, 1);  // Flush should be asserted
}
*/
TEST_F(HazardUnitTest, TestFlushJumpHazard) {
    setInputs(0, 0, 0, 0, 0, 0, 0, false, false, false, false, true);
    EXPECT_EQ(dut->Flush, 1);  // Flush should be asserted
}

TEST_F(HazardUnitTest, TestNoForwarding) {
    setInputs(1, 2, 0, 0, 0, 3, 4, false, false, false, false, false);
    EXPECT_EQ(dut->ForwardAE, 0b00);  // ForwardAE should be 2'b00
    EXPECT_EQ(dut->ForwardBE, 0b00);  // ForwardBE should be 2'b00
}