$version Generated by VerilatedVcd $end
$timescale 1ps $end
 $scope module TOP $end
  $var wire 5 # Rs1E [4:0] $end
  $var wire 5 $ Rs2E [4:0] $end
  $var wire 5 % Rs1D [4:0] $end
  $var wire 5 & Rs2D [4:0] $end
  $var wire 5 ' RdE [4:0] $end
  $var wire 5 ( destReg_m [4:0] $end
  $var wire 5 ) destReg_w [4:0] $end
  $var wire 1 * memoryRead_e $end
  $var wire 1 + RegWriteM $end
  $var wire 1 , RegWriteW $end
  $var wire 1 - zero_hazard $end
  $var wire 1 . jump_hazard $end
  $var wire 2 / ForwardAE [1:0] $end
  $var wire 2 0 ForwardBE [1:0] $end
  $var wire 1 1 stall $end
  $var wire 1 2 Flush $end
  $scope module HazardUnit $end
   $var wire 5 # Rs1E [4:0] $end
   $var wire 5 $ Rs2E [4:0] $end
   $var wire 5 % Rs1D [4:0] $end
   $var wire 5 & Rs2D [4:0] $end
   $var wire 5 ' RdE [4:0] $end
   $var wire 5 ( destReg_m [4:0] $end
   $var wire 5 ) destReg_w [4:0] $end
   $var wire 1 * memoryRead_e $end
   $var wire 1 + RegWriteM $end
   $var wire 1 , RegWriteW $end
   $var wire 1 - zero_hazard $end
   $var wire 1 . jump_hazard $end
   $var wire 2 / ForwardAE [1:0] $end
   $var wire 2 0 ForwardBE [1:0] $end
   $var wire 1 1 stall $end
   $var wire 1 2 Flush $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#1
b00000 #
b00000 $
b00000 %
b00000 &
b00000 '
b00000 (
b00000 )
0*
0+
0,
0-
1.
b00 /
b00 0
01
12
