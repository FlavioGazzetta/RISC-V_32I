$version Generated by VerilatedVcd $end
$timescale 1ps $end
 $scope module TOP $end
  $var wire 1 & clk $end
  $var wire 1 ' rst_n $end
  $var wire 1 ( load $end
  $var wire 1 ) store $end
  $var wire 32 * address [31:0] $end
  $var wire 32 + data_in [31:0] $end
  $var wire 32 , mem_data [31:0] $end
  $var wire 1 - mem_ready $end
  $var wire 1 . hit $end
  $var wire 1 / miss $end
  $var wire 1 0 mem_write $end
  $var wire 1 1 mem_read $end
  $var wire 1 2 busy $end
  $var wire 32 3 data_out [31:0] $end
  $var wire 32 4 mem_write_data [31:0] $end
  $scope module L1Cache $end
   $var wire 32 9 DATA_WIDTH [31:0] $end
   $var wire 32 : SET_WIDTH [31:0] $end
   $var wire 32 ; TAG_WIDTH [31:0] $end
   $var wire 1 & clk $end
   $var wire 1 ' rst_n $end
   $var wire 1 ( load $end
   $var wire 1 ) store $end
   $var wire 32 * address [31:0] $end
   $var wire 32 + data_in [31:0] $end
   $var wire 32 , mem_data [31:0] $end
   $var wire 1 - mem_ready $end
   $var wire 1 . hit $end
   $var wire 1 / miss $end
   $var wire 1 0 mem_write $end
   $var wire 1 1 mem_read $end
   $var wire 1 2 busy $end
   $var wire 32 3 data_out [31:0] $end
   $var wire 32 4 mem_write_data [31:0] $end
   $var wire 3 # state [2:0] $end
   $var wire 32 $ lru [31:0] $end
   $var wire 25 5 tag [24:0] $end
   $var wire 5 6 index [4:0] $end
   $var wire 1 7 way $end
   $var wire 1 8 hit_way $end
   $scope module unnamedblk1 $end
    $var wire 32 % i [31:0] $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#1
b000 #
b00000000000000000000000000000000 $
b00000000000000000000000000100000 %
1&
0'
0(
0)
b00000000000000000000000000000000 *
b00000000000000000000000000000000 +
b00000000000000000000000000000000 ,
0-
0.
0/
00
01
02
b00000000000000000000000000000000 3
b00000000000000000000000000000000 4
b0000000000000000000000000 5
b00000 6
07
08
b00000000000000000000000000100000 9
b00000000000000000000000000000101 :
b00000000000000000000000000011001 ;
#2
0&
#3
1&
#4
0&
#5
1&
#6
0&
#7
1&
#8
0&
#9
1&
#10
0&
#11
1&
1'
#12
0&
#13
b010 #
1&
1)
b00000000000000000010000000000000 *
b11001010111111101011101010111110 +
1/
12
b0000000000000000001000000 5
#14
0&
#15
b100 #
1&
#16
0&
#17
b000 #
b00000000000000000000000000000001 $
1&
1.
0/
02
b11001010111111101011101010111110 3
17
#18
0&
#19
1&
0)
#20
0&
#21
b010 #
1&
1)
b00000000000000010010000000000000 *
b11111110111011011011111011101111 +
0.
1/
12
b00000000000000000000000000000000 3
b0000000000000001001000000 5
#22
0&
#23
b100 #
1&
#24
0&
#25
b000 #
b00000000000000000000000000000000 $
1&
1.
0/
02
b11111110111011011011111011101111 3
b11001010111111101011101010111110 4
07
18
#26
0&
#27
1&
0)
#28
0&
