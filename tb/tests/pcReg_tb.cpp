#include "cpu_testbench.h"  // Include the common testbench header for shared functionality
#include "VpcReg.h"          // Generated by Verilator from the .sv file
#include "verilated.h"
#include "verilated_vcd_c.h"
#include "gtest/gtest.h"

// Define the testbench for pcReg based on the CpuTestbench class
class PcRegTestbench : public CpuTestbench
{
public:
    void SetUp() override
    {
        CpuTestbench::SetUp();  // Call the base SetUp to initialize context and other setup
        top_ = new VpcReg(context_);  // Initialize the DUT for pcReg
        tfp_ = new VerilatedVcdC;     // For waveform tracing

        // Initialize trace and simulation
        Verilated::traceEverOn(true);
        top_->trace(tfp_, 99);
        tfp_->open(("test_out/" + name_ + "/waveform.vcd").c_str());

        // Set initial inputs
        top_->clk = 1;
        top_->rst = 1;  // Apply reset initially
        top_->nextPC = 0x0;  // Example nextPC value

        runSimulation(10);  // Process reset
        top_->rst = 0;      // Release reset
    }

    // Runs the simulation for a clock cycle, evaluates the DUT, dumps waveform.
    void runSimulation(int cycles = 1) override
    {
        CpuTestbench::runSimulation(cycles);  // Call the base class method to run simulation
    }

    void TearDown() override
    {
        // End trace and simulation
        top_->final();
        tfp_->close();

        // Free memory and call base TearDown
        if (top_) delete top_;
        if (tfp_) delete tfp_;
        CpuTestbench::TearDown();  // Clean up common testbench resources
    }

protected:
    VpcReg* top_;  // DUT (Design Under Test)
    VerilatedVcdC* tfp_;  // Trace file for waveform dump
};

// Test case for pcReg functionality
TEST_F(PcRegTestbench, PCValueDuringReset)
{
    initSimulation();

    // Assert that after reset, the PC is initialized to 0xBFC00000
    EXPECT_EQ(top_->pc, 0xBFC00000);
}

TEST_F(PcRegTestbench, PCValueAfterReset)
{
    initSimulation();

    // After the reset is deasserted, load nextPC value into PC
    top_->nextPC = 0x1000;
    runSimulation(1);  // Simulate one clock cycle

    // Assert that the pc value matches nextPC after reset release
    EXPECT_EQ(top_->pc, 0x1000);
}

TEST_F(PcRegTestbench, IncPCTest)
{
    initSimulation();

    // Simulate a simple increment of PC
    top_->nextPC = 0x1000;
    runSimulation(1);  // First cycle
    EXPECT_EQ(top_->incPC, 0x1004);  // Expected increment by OFFSET (4)

    top_->nextPC = 0x2000;
    runSimulation(1);  // Second cycle
    EXPECT_EQ(top_->incPC, 0x2004);  // Expected increment by OFFSET (4)
}
